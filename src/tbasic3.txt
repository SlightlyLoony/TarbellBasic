*
* RTN A.1
* 16 BIT SUBTRACT
* HL=HL-DE
SUB16	MOV	A,L
	SUB	E
	MOV	L,A	;BACK TO WHENCE IT CAME
	MOV	A,H	;SUBTRACT MSB'S
	SBB	D	;WITH THE CARRY (BORROW)
	MOV	H,A	;AND BACK
	CMC		;REVERSE THE CARRY FLAG
	RET		;ALL DONE
* RTN A.2
* 16 BIT COMPARE
* FLAGS ARE SET AS FOR HL-DE, WITHOUT AFFECTING
* THE REGISTERS. A IS CHANGED.
* ONLY CARRY AND ZERO ARE CORRECTLY SET
CMP16	MOV	A,H	;TEST MSB'S
	SUB	D
	RNZ		;NOT THE SAME
	MOV	A,L	;TEST LSB'S
	SUB	E
	RET		;DONE.
* RTN A.3
* 8 BY 8 MULTIPLY
* DE=D*E, NO OTHER REGISTERS DISTURBED
MULT	PUSH	H
	PUSH	PSW	 ;SAVE REGISTERS
	MOV	H,D	;SET UP MULTIPLIERS
	MVI	L,0	;CLEAR SOME
	MOV	D,L
	DAD	H	;SHIFT AND ADD (S/A) 1
	JNC	MULT2	;NO ADD
	DAD	D	;ADD
MULT2	DAD	H	;S/A 2
	JNC	MULT3
	DAD	D
MULT3	DAD	H	;S/A 3
	JNC	MULT4
	DAD	D
MULT4	DAD	H	;S/A 4
	JNC	MULT5
	DAD	D
MULT5	DAD	H	;S/A 5
	JNC	MULT6
	DAD	D
MULT6	DAD	H	;S/A 6
	JNC	MULT7
	DAD	D
MULT7	DAD	H	;S/A 7
	JNC	MULT8
	DAD	D
MULT8	DAD	H	;S/A 8
	JNC	MULT9	;DONE
	DAD	D
MULT9	POP	PSW	;RESTORE REGISTERS
	XCHG		;PRODUCT TO DE
	POP	H
	RET		;DONE.
* RTN. A.4
* FAST MULTIPLY BY 6
* HL=HL*6
* NO OTHER REGISTERS DISTURBED
* CARRY SET IF OVERFLOW
FSTML	PUSH	D	;SAVE DE
	DAD	H	;MULTIPLY HL BY 2
	MOV	D,H	;SEND IT TO DE
	MOV	E,L
	DAD	H	;MULTIPLY HL BY 2 
	DAD	D	;6X=4X+2X
	POP	D	;RESTORE DE
	RET		;GO AWAY
* RTN. A.5
* MOVE BLOCK DOWN
* (HL) TO (DE), BC TIMES
* NO REGISTERS DISTURBED
MVDN	PUSH	PSW	;SAVE THE WORLD
	PUSH	B
	PUSH	D
	PUSH	H
MVDN1	MOV	A,M	;GET DATA
	STAX	D	;STORE IT IN NEW LOCATION
	INX	H	;UPDATE INDEXES
	INX	D
	DCX	B	;UPDATE BYTE COUNTER
	MOV	A,B	;BC = 0?
	ORA	C
	JNZ	MVDN1	;JUMP IF MORE BYTES TO MOVE
	POP	H	;RESTORE THE WORLD TO IT'S FORMER STATE
	POP	D
	POP	B
	POP	PSW
	RET		;ALL DONE
* RTN. A.6 
* MOVE BLOCK UP
* (HL) TO (DE), BC TIMES
* NO REGISTERS DISTURBED
MVUP	PUSH	PSW	;SAVE THE WORLD
	PUSH	B
	PUSH	D
	PUSH	H
	DAD	B	;CHANGE INDEXES TO LAST BYTE+1
	XCHG		;GET DE TO HL
	DAD	B	;CHANGE DE
	XCHG		;BACK TO NORMAL
MVUP1	DCX	H	;UPDATE INDEXES
	DCX	D
	DCX	B	;UPDATE THE CHARACTER COUNTER
	MOV	A,M	;GET THE DATA
	STAX	D	;STORE IT TO NEW LOCATION
	MOV	A,B	;IS BC=0?
	ORA	C
	JNZ	MVUP1	;MORE DATA TO MOVE
	POP	H	;RESTORE THE WORLD
	POP	D
	POP	B
	POP	PSW
	RET		;DONE
* RTN. A.7
* MOVE DATA BLOCK
* WILL MOVE OVERLAPPING BLOCKS UP OR DOWN WITHOUT
* ERRORS
* (HL) TO (DE), BC TIMES
* NO REGISTERS ARE DISTURBED
MOVE	CALL	CMP16	;SEE WHETHER MOVING DATA UP OR DOWN
	CC	MVUP	;CARRY SET SO WE'RE GOING UP
	CNC	MVDN	;CARRY CLEAR SO WE'RE GOING DOWN
	RET		;DONE
* RTN. A.8
* STRING COMPARE
* FIRST BYTE OF TWO STRINGS MUST BE ADDRESSED
* BY HL AND DE.
* IF (HL)=(DE), THE ZERO FLAG IS SET
* IF (DE)<(HL), THE CARRY FLAG IS SET
* REGISTER A IS DISTURBED
* LAST CHARACTER OF STRINGS MUST HAVE 2 TO THE 7 SET
STRNG	PUSH	B	;SAVE THE WORLD
	PUSH	D
	PUSH	H
	MVI	C,0	;CLEAR END FLAG
STRN1	MOV	A,M	;GET A CHARACTER
	ANA	A	;CHECK FOR LAST ONE
	JP	STRN2	;NOT THE LAST ONE
	INR	C	;SET END FLAG
	ANI	7FH	;STRIP UPPER BIT
STRN2	CALL	STRN10	;CONVERT TO UPPER CASE
	MOV	B,A	;CHARACTER TO B
	LDAX	D	;GET CHARACTER FROM OTHER STRING
	ANA	A	;CHECK FOR LAST ONE
	JP	STRN3	;NOT THE LAST ONE
	INR	C	;CHECK IF BOTH STRINGS END HERE
	DCR	C
	JNZ	STRN6	;YES, BOTH END HERE
	DCR	A	;CORRECT A IF ONLY ONE ENDING HERE
STRN6	INR	C	;SET END FLAG
	ANI	7FH	;STRIP UPPER BIT
STRN3	CALL	STRN10
	SUB	B	;COMPARE THE TWO CHARACTERS
	INX	D	;UPDATE INDEXES
	INX	H
	PUSH	PSW	;SAVE COMPARE RESULT
	DCR	C	;CHECK IF END OF STRING OCCURED
	INR	C
	JNZ	STRN4	;END OCCURED, SO LEAVE
	POP	PSW	;GET RESULT BACK
	JZ	STRN1	;TRY NEXT CHARACTER
STRN5	POP	H	;RESTORE THE WORLD
	POP	D
	POP	B
	RET		;PHEW, DONE!
STRN4	DCR	C	;CHECK TO SEE IF BOTH STRINGS ENDED HERE
	DCR	C
	JZ	STRN8	;YUP, BOTH ENDED HERE
	POP	PSW	;GET RESULT BACK
	DCR	C	;CLEAR ZERO FLAG (DIFFERENT LENGTHS CAN'T
* BE EQUAL
	PUSH	PSW	;SAVE RESULT AGAIN
STRN8	POP	PSW	;RESTORE RESULT
	JMP	STRN5	;LEAVE
STRN10	CPI	7BH	;CHECK FOR LOWER CASE
	RNC		;NOPE
	CPI	61H
	RC
	ANI	5FH
	RET
* RTN. A.9
* STRING SEARCH
* SEARCHES A TABLE STARTING AT (DE) OF BC ITEMS
* FOR THE FIRST OCCURENCE OF A STRING (HL)
* ON RETURN, IF ZERO SET, A FIND WAS MADE, AND
* BC = ITEM NUMBER, DE = FIRST ADDRESS OF
* MATCHING STRING
* IF ZERO IS CLEARED, NO FIND WAS MADE, AND
* BC = NEXT ITEM NUMBER, DE = NEXT ADDRESS
* AFTER THE TABLE.
STSRH	PUSH	B	;SAVE NUMBER OF ITEMS
STSRC	CALL	STRNG	;COMPARE STRINGS
	JZ	STSC1	;AH, FOUND IT
* ADVANCE TILL NEXT STRING
STSC2	LDAX	D	;GET A CHARACTER
	ANA	A	;SET FLAGS
	INX	D	;UPDATE COUNTER
	JP	STSC2	;NOT LAST CHARACTER YET
	DCX	B	;UPDATE ITEM COUNTER
	MOV	A,B	;LAST ITEM?
	ORA	C
	DCR	A	;MAKE ZERO FLAG CLEAR IF ZERO
	JM	STSC1	;YUP, SO NO FINDS
	JP	STSRC	;LOOP FOR NEXT STRING
STSC1	XTHL		;GET NUMBER OF ITEMS AND SAVE HL
	PUSH	D	;SAVE DE
	MOV	D,B	;BC TO DE
	MOV	E,C
	PUSH	PSW	;SAVE FLAGS
	CALL	SUB16	;COMPUTE ITEM NUMBER OF FIND
	POP	PSW	;RESTORE FLAGS
	INX	H	;CORRECT TO MAKE FIRST ITEM #1
	POP	D	;GET BACK DE
	XTHL		;GET BACK HL, SAVING COMPUTED ITEM NUMBER
	POP	B	;GET BACK ITEM NUMBER
	RET		;ALL DONE.
* RTN. A.10 
* COUNT CHARACTERS IN STRING
* CHARACTERS IN STRING (HL) TO DE
* A,B,C,H,L NOT DISTURBED
COUNT	PUSH	PSW	;SAVE REGISTERS
	PUSH	H
	LXI	D,0	;CLEAR DE
	XRA	A	;CLEAR FLAGS
CNT1	INX	D	;UPDATE COUNTER
	ORA	M	;SET FLAGS
	INX	H	;UPDATE INDEX
	JP	CNT1	;LOOP IF NOT END YET
	POP	H	;RESTORE REGISTERS
	POP	PSW
	RET		;FINI
* RTN. A.11
* BINARY DIVIDE 16/8 TO 8 WITH REMAINDER, ROUNDED AND
* UNROUNDED QUOTIENTS
* L = HL/E, UNROUNDED, H=REMAINDER
* DE = HL/E, ROUNDED
* B,C NOT DISTURBED
* CARRY CLEARED IF OVERFLOW
DIV	PUSH	B	;SAVE REGISTERS
	MOV	A,H	;CHECK FOR OVERFLOW
	SUB	E
	JNC	DIV6	;OH,DEAR, OVERFLOW
	MVI	B,0	;INITIALIZE QUOTIENT REGISTER
	MVI	C,8	;INITIALIZE SHIFT COUNTER
DIV3	DAD	H	;SHIFT HL LEFT
	JC	DIV1	;JUMP IF A BIT FELL OFF
	MOV	A,H	;TEST SUBTRACT
	SUB	E	;WILL IT FIT?
	JC	DIV2	;NOPE, TOO SMALL
DIV1	MOV	A,H	;PERFORM SUBTRACTION FOR REAL
	SUB	E
	MOV	H,A	;STICK IT BACK
	STC		;SHIFT A 'ONE' INTO QUOTIENT
DIV5	MOV	A,B	;SET UP TO SHIFT CARRY INTO QUOTIENT
	RAL		;SHIFT
	MOV	B,A	;STICK IT BACK
	DCR	C	;UPDATE SHIFT COUNTER
	JNZ	DIV3	;LOOP IF MORE SHIFTS TO DO
	MOV	A,E	;ROUND QUOTIENT
	MVI	D,0	;CLEAR D
	ANA	A	;CLEAR CARRY
	RAR		;DIVIDE BY TWO
	MOV	E,B	;UNROUNDED QUOTIENT TO E
	CMP	H	;REMAINDER*2>=DIVISOR?
	JNC	DIV4	;NOPE
	INX	D	;YES, SO INCREMENT
DIV4	STC		;SET FLAG FOR NO OVERFLOW
DIV6	MOV	L,B	;SEND UNROUNDED QUOTIENT TO L
	POP	B	;RESTORE REGISTERS
	RET		;GO AWAY
DIV2	ANA	A	;CLEAR CARRY TO SHIFT A 0
	JMP	DIV5	;SHIFT IT IN
* RTN. A.12
* 8 BIT SEARCH
* SEARCHES FROM HL FOR BC BYTES, LOOKING FOR A
* ZERO SET IF FIND
* A,D,E NOT DISTURBED
* BC = ITEM NUMBER
* HL = ADDRESS OF FIND
SRC8	PUSH	B	;SAVE REGISTERS
SRC82	CMP	M	;COMPARE AGAINST MEMORY
	JZ	STSC1	;AH, HA, A FIND!
	INX	H	;UPDATE INDEX
	DCX	B	;UPDATE BYTE COUNTER
	INR	B	;CHECK FOR BEING DONE
	DCR	B	
	JNZ	SRC82	;NOT DONE YET
	INR	C	;CHECK AGAIN
	DCR	C
	JNZ	SRC82	;NOT DONE YET
	INR	C	;CLEAR THE ZERO FLAG FOR NO FIND
	JMP	STSC1	;OH WELL, YOU CAN'T WIN 'EM ALL!
* RTN A.13
* 8 BIT ADD TO HL
* HL=HL+A
* ONLY HL DISTURBED
ADHL	PUSH	PSW	;SAVE A
	ADD	L	;ADD LSB
	MOV	L,A	;STUFF IT BACK
	JNC	ADHL1	;NO CARRY, SO DON'T INCREMENT
	INR	H	;CORRECT FOR CARRY FROM LSB
ADHL1	POP	PSW	;RESTORE A
	RET		;DONE
* RTN. A.14
* 2 BYTE TABLE LOOK UP
* BC = ITEM DE ON TABLE STARTING AT HL
* A,D,E,H,L NOT DISTURBED
TABLE	PUSH	PSW	;SAVE REGISTERS
	PUSH	D	
	XCHG		;SET UP FOR ADDRESS COMPUTATION
	DAD	H	;MULTIPLY ITEM # BY TWO
	DAD	D	;ADD IN BASE ADDRESS
	DCX	H	;GET ADDRESS OF MSB
	MOV	B,M	;STUFF IT INTO B
	DCX	H	;GET ADDRESS OF LSB
	MOV	C,M	;STUFF IT INTO C
	XCHG		;RESTORE HL
	POP	D	;RESTORE OTHER REGISTERS
	POP	PSW
	RET		;DONE
* THIS ROUTINE CHECKS THE INTEGRITY OF BASIC BY COMPUTING
* THE MODULO 256 SUM OF ALL INSTRUCTIONS
CHCK	LXI	H,STMSG+8	;LAST ADDRESS
	LXI	D,START+3	;FIRST ADDRESS
	PUSH	D	;SAVE IT
	CALL	SUB16	;COMPUTE NUMBER OF BYTES
	XCHG		;TO DE
	POP	H	;GET FIRST ADDRESS BACK
	XRA	A	;CLEAR PARTIAL CHECKSUM
CHCK1	ADD	M	;ADD A BYTE
	DCX	D	;CHECK FOR DONENESS
	INX	H	;UPDATE INDEX
	MOV	B,A	;SAVE PARTIAL CHECKSUM
	MOV	A,D	;CHECK COUNT
	ORA	E
	MOV	A,B	;PARTIAL CHECKSUM BACK
	JNZ	CHCK1	;NOT DONE YET
	RET		;DONE
* MATH MODULE
* RTN. B.1
* TWO DIGIT BCD SUBTRACT
* A,CARRY = B-C-CARRY 
* B,C,D,E,H,L UNDISTURBED
SUB2	PUSH	B	;SAVE REGISTERS
	MVI	A,0	;CLEAR A WITHOUT TOUCHING CARRY
	ADC	C	;GET C+CARRY
	DAA		;BCD ADJUST
	CMA		;GET 1'S COMPLEMENT
	SUI	66H	;GET 9'S BCD COMPLEMENT
	STC		;GET READY TO CORRECT TO 10'S COMPLEMENT
	ADC	B	;ADD B AND CORRECTION TO 10'S COMPLEMENT
	DAA		;BCD ADJUST
	POP	B	;RESTORE REGISTERS
	CMC		;CORRECT CARRY
	RET		;FINI
* RTN. B.2
* ZERO REGISTER
* ZEROES A BYTES STARTING AT HL
ZERO	MVI	M,0	;STORE A ZERO
	INX	H	;UPDATE INDEX
	DCR	A	;UPDATE COUNTER
	JNZ	ZERO	;LOOP FOR MORE BYTES
	RET		;DONE
* RTN. B.3
* SHIFT LEFT ONE BCD DIGIT (PACKED)
* HL = ADDRESS OF MSB
SFTL	PUSH	PSW	;SAVE THE WORLD
	PUSH	B
	PUSH	D
	PUSH	H
	DCX	H	;SET UP FOR FIRST SHIFT
	MVI	E,5	;SET UP SHIFT COUNT
SFTL1	MOV	A,M	;GET A BYTE
	INX	H	;GET THE NEXT BYTE TOO
	MOV	D,M	
	DCX	H	;SET THE INDEX BACK
	MVI	C,4	;SET THE SHIFT COUNTER
SFTL2	MOV	B,A	;SHIFT LOOP, SAVE UPPER BYTE
	MOV	A,D	;SHIFT D LEFT ONE INTO CARRY
	RAL
	MOV	D,A
	MOV	A,B	;GET UPPER BYTE BACK
	RAL		;SHIFT THAT CARRY BACK IN
	DCR	C	;CHECK SHIFT COUNT
	JNZ	SFTL2	;LOOP FOR MORE SHIFTS
	MOV	M,A	;STORE THE SHIFTED DIGIT PAIR
	DCR	E	;CHECK BYTE COUNTER
	INX	H	;UPDATE INDEX
	JNZ	SFTL1	;LOOP FOR MORE BYTES
	POP	H	;PUT THE WORLD BACK, PLEASE.
	POP	D
	POP	B
	POP	PSW
	DCX	H	;CORRECT INDEX
	RET		;ALL DONE!
* RTN. B.4
* SHIFT BUFFER DOWN
* SHIFTS BY MOVING INDEX TO SAVE TIME
* IN: A = PLACES TO SHIFT
*    HL = ADDRESS OF MSB
*     B = 00 OR 99 FOR POSITIVE OR NEGATIVE
* OUT: HL = ADDRESS OF MSB
SHFT	RRC		;CHECK LSB FOR ODDNESS
	CC	SHFT1	;IF IT'S ODD, SHIFT LEFT ONE DIGIT
	ANI	7FH	;STRIP UPPER BIT OFF
SHFT5	ANA	A	;SET FLAGS
	RZ		;RETURN IF ALL DONE
	DCX	H	;GO BACK ONE
	MOV	M,B	;SET IN FILLER
	DCR	A	;DECREMENT COUNTER
	JMP	SHFT5	;LOOP TO SEE IF DONE YET
SHFT1	CALL	SFTL	;SHIFT LEFT
	PUSH	PSW	;SAVE A
	MOV	A,B	;GET FILLER BYTE
	ANI	0F0H	;STRIP OFF UPPER DIGIT
	MOV	C,A	;STICK IT IN C
	MOV	A,M	;GET DIGIT FROM MEMORY
	ANI	0FH	;STRIP OFF LOWER DIGIT
	ORA	C	;SET IN THE UPPER DIGIT
	MOV	M,A	;STICK IT BACK TO MEMORY
	POP	PSW	;RESTORE A
	RET		;DONE
* RTN. B.5
* ADD EXPONENTS
* B,D = SIGN BYTES, C,E = EXPONENTS
* OUT: B,C = SIGN BYTE, EXPONENT RESULT
* IF AN UNDER/OVERFLOW OCCURS, THE
* MATH ERROR FLAG IS SET.
* CARRY FLAG IS SET ON EXIT IF AN ERROR OCCURRED
EXAD	MOV	A,B	;GET STATE OF BC
	XRA	D	;GET A 0 IF SIGNS ARE THE SAME
	ANI	40H	;LOOK AT SIGN BIT ONLY
	JNZ	EXAD1	;JUMP IF DIFFERENT SIGNS
	MOV	A,C	;ADD THE EXPONENTS
	ADD	E
	DAA		;BCD ADJUST
	MOV	C,A	;PUT ANSWER IN C
	RNC		;RETURN IF NO ERROR
	MOV	A,B	;FIGURE OUT IF UNDER OR OVER FLOW
	RLC		;GET SIGN BIT TO LSB
	RLC
	ANI	1	;CLEAR ALL OTHERS
	INR	A	;SET UNDER/OVERFLOW BIT
	STA	MERR	;STORE IT TO MATH ERROR FLAG
	STC		;SET ERROR FLAG
	RET		;DONE
EXAD1	ANA	B	;CHECK IF BC IS NEGATIVE
	JNZ	EXAD3	;YUP, SO SKIP THE SWAP
	PUSH	B	;SWAP BC AND DE
	PUSH	D
	POP	B
	POP	D
EXAD3	PUSH	B	;SAVE BC
	MOV	B,E	;SET UP FOR SUBTRACT
	CALL	SUB2	;SUBTRACT IN BCD
	POP	B	;GET BC BACK
	MVI	B,0	;SET SIGN POSITIVE
	MOV	C,A	;SET ANSWER IN C
	RNC		;RETURN IF STILL POSITIVE AFTER SUBTRACT
	CMA		;GET 9'S COMPLEMENT
	SUI	66H	;GET 10'S COMPLEMENT
	ADI	1	;CORRECT FOR 10'S COMPLEMENT
	DAA		;BCD ADJUST
	MOV	C,A	;SET NEW ANSWER IN C
	MVI	B,040H	;SET SIGN NEGATIVE
	RET		;ALL DONE
LINK03	LINK	A:TBASIC4
