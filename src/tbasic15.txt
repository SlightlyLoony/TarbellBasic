*
*
* TARBELL BASIC SOURCE MODULE #15
* COPYRIGHT (C) 1978, 1979 TARBELL ELECTRONICS
* LAST CHANGE ON THIS MODULE MADE 3-12-79.
*
* SAVE STATEMENT PROCESSOR
*
STSAV	JNC	SPRAT	;MUST HAVE AN EXPRESSION
	CALL	FNOP	;GET THE OPERAND
	JNC	SPRAT	;SUPPOSED TO BE A STRING
	SHLD	NAME	;SAVE IT
	LHLD	FSRC	;SET UP LIST FLAGS
	SHLD	FLST
	LHLD	ESRC
	SHLD	LLST
	CALL	CRLF	;SEND THE WRITE MESSAGE
	LXI	H,PCSVM
	CALL	CHKRUN
	MVI	A,1
	STA	KIND	;SET OPERATION FLAG
	MVI	A,0FFH	;SET CASSETTE MODE
	STA	CATV
	STA	CSST
	XRA	A	;SET ZERO FLAG
	CALL	COUT	;SEND IT
	JMP	LIST1	;DO IT TO IT
*
* APPEND STATEMENT PROCESSOR
*
STAPP	MVI	A,0	;CLEAR OPFLAG
	STA	OPFLG
	MVI	A,8	;SET OPERATION FLAG
	STA	KIND
	JMP	STLOAZZ
*
* LOAD STATEMENT PROCESSOR
*
STLOA	MVI	A,0	;SET OPERATION FLAG
	STA	KIND
STLOAZZ	JNC	SPRAT	;MUST HAVE EXPRESSION FOLLOWING
	XRA	A	;CLEAR TEMP2
	STA	TEMP2
	XCHG		;FIRST STACK TO HL
	PUSH	H	;SAVE IT
	CALL	FNOPO	;GET THE ELEMENT
	JNC	SPRAT	;MUST BE A STRING
	SHLD	NAME	;SAVE IT
	POP	H	;RESTORE STACK ADDRESS
	CALL	GTIN	;GET NEXT STACK ELEMENT
	DAD	D
	MOV	A,M	;GOT IT
	CPI	0DH	;IS IT A COMMA?
	JNZ	STLOA1	;NOPE
	INX	H	;GET NEXT ELEMENT
	CALL	FNOPO	;GET THE ELEMENT
	JNC	SPRAT	;SUPPOSED TO BE A STRING, ROCK
	CALL	COUNT	;SEE HOW MANY CHARACTERS THERE ARE
	MOV	C,E	;TO BC
	MOV	B,D
	LXI	D,TEMP2	;MOVE IT DOWN
	CALL	MOVE
STLOA1	CALL	CRLF	;SEND READ MESSAGE
	LXI	H,PCLDM
	CALL	CHKRUN
	XRA	A	;SET ENTRY MODE
	STA	CMND
	DCR	A	;SET CASSETTE MODE
	STA	CSST
	STA	CATV
	XRA	A	;SEND START MOTORS
	CALL	CAIN
	LDA	OPFLG	;SEE IF WE ARE DOING APPEND
	ANA	A
	JZ	STLOAA	;YUP
	LDA	CHKEN	;LOOK FOR CHECKREAD
	ANA	A
	JNZ	STLOAA	;SURE IS, SO NO NEW
	CALL	PNEW1	;CLEAR THE PRESENT PROGRAM
STLOAA	LHLD	ESRC	;USE END OF SOURCE AS LOAD POINT
	SHLD	PNTR
	SHLD	INSR
	XRA	A
	STA	RUNF
	JMP	RSTRT
STLOA2	LDA	TEMP2	;SEE IF A JUMP DESCRIPTOR WAS INCLUDED
	ANA	A
	JZ	RSTRT	;NOPE
	XRA	A	;SET UP FOR SCAN OFF
	STA	ESCN
	LXI	H,TEMP2-2
	SHLD	NSCN
	MVI	M,80H
	INX	H
	MVI	M,2CH
	CALL	USCN	;GET IT ALL RIGHT
	CALL	USCN
	XRA	A	;CLEAR RUN FLAG
	STA	RUNF
	CALL	ASDA	;ASSIGN ADDRESSES
	XRA	A	;CLEAR RURD,RUNF
	STA	RURD
	STA	RUNF
	JMP	PRUN	;RUN THE DAMN THING
*
* OPEN STATEMENT PROCESSOR
*
STOPE	JNC	SPRAT	;NO EXPRESSION
	MVI	A,20	;PUT CODE FOR OPEN
	STA	KIND	;INTO SCRATCH AREA.
	XRA	A	;SET ZERO
	JMP	DEVICER	;PROCESS IT
*
* CLOSE STATEMENT PROCESSOR
*
STCLO	JNC	SPRAT	;NO EXPRESSION
	MVI	A,21	;PUT CODE FOR CLOSE
	STA	KIND	;INTO SCRATCH AREA.
	MVI	A,1
	ANA	A
	STC
DEVICER	XCHG		;DE TO HL
	PUSH	PSW	;SAVE FLAGS
	PUSH	H	;SAVE STACK ADDRESS
	CALL	FNOPO	;GET THE FIRST OPERAND
	JC	SPRAT	;CAN'T BE A STRING, ROCK
	CALL	BCDB	;CONVERT IT TO BINARY
	LXI	D,8	;CHECK FOR TOO BIG
	CALL	CMP16
	JNC	SPRAT	;IT WAS
	MOV	B,L	;TURN INTO MASK
	CALL	MASKER	;DO IT
	POP	H	;GET BACK STACK ADDRESS
	PUSH	PSW	;SAVE THE MASK
	CALL	GTIN	;FIND THE NEXT ITEM
	DAD	D
DEVICE6	MOV	A,M	;GET A BYTE
	LXI	D,0	;CLEAR DE
	CPI	9	;DONE?
	JZ	DEVICE4	;YUP
	CPI	0DH	;IS IT A COMMA?
	JZ	DEVICE5	;YUP
	CALL	FNOPO	;GET THE OPERAND
	XCHG		;STRING ADDRESS TO DE
	JNC	SPRAT	;CAN'T HAVE A NUMBER HERE!
DEVICE4	XCHG		;STORE THE NAME ADDRESS
	SHLD	NAME
	POP	PSW	;RESTORE THE MASK
	LXI	B,1	;SET UP FOR CHANNEL LOOP
DEVICE3	PUSH	PSW	;SAVE THE MASK
	CALL	MFND	;LOOK FOR A CHANNEL
	JNZ	DEVICE1	;NONE FOUND
	POP	D	;GET BACK THE MASK
	POP	PSW	;SET THE FLAGS
	PUSH	PSW	;SAVE 'EM AGAIN
	PUSH	D
	CALL	DEVICE2	;CALL THE CHANNEL PROCESSOR
	POP	PSW	;GET BACK THE MASK
	JMP	DEVICE3	;TRY FOR ANOTHER ONE
DEVICE2	PCHL		;JUMP TO PROCESSOR
DEVICE1	POP	H	;CLEAN UP THE STACK
	POP	H
	RET		;DONE.......
DEVICE5	INX	H	;GET NEXT ITEM
	JMP	DEVICE6	;TRY AGAIN
*
* RECORD FUNCTION PROCESSOR
*
FPRREC	CALL	FPR40	;GET THE OPERAND
	SHLD	RECORD	;STORE IT
	MVI	A,0FFH
	STA	ROCK
	LDA	FUNK
	ORI	1	;SET FUNKY BIT
	STA	FUNK
	RET		;DONE
*
* TYPE FUNCTION PROCESSOR
*
FPRTYP	CALL	FPR40	;GET THE OPERAND
	SHLD	TYPE	;STORE IT
	MVI	A,0FFH
	STA	ROCK
	LDA	FUNK
	ORI	2
	STA	FUNK
	RET		;DONE.......
*
* FILE FUNCTION PROCESSOR
*
FPRFIL	CALL	FNOP	;GET AN OPERAND
	JC	FPRFIL1	;STRING
	CALL	BCDB	;CONVERT NUMBER TO BINARY
FPRFIL1	SHLD	FILE	;STORE IT
	MVI	A,0FFH
	STA	ROCK
	LDA	FUNK
	ORI	4
	STA	FUNK
	RET
*
* DISK FUNCTION PROCESSOR
*
FPRDIS	CALL	FPR40	;GET THE OPERAND
	SHLD	DISK	;SAVE IT
	MVI	A,0FFH	;SET ROCK
	STA	ROCK
	LDA	FUNK
	ORI	10H
	STA	FUNK
	RET
*
* DO FUNCTION PROCESSOR
*
FPRDO	CALL	FNOP	;GET AN OPERAND
	JC	FPRDO1	;IT'S A STRING
	CALL	BCDB	;CONVERT TO NUMBER
FPRDO1	SHLD	DOPARA	;SAVE IT
	CALL	POPS	;GET RID OF THE COMMA
	CALL	FNOP	;GET ANOTHER OPERAN
	JC	FPRDO2	;ITS A STRING
	CALL	BCDB	;CONVERT TO BINARY
FPRDO2	SHLD	DO	;SAVE IT
	MVI	A,0FFH	;SET ROCK
	STA	ROCK	
	LDA	FUNK
	ORI	8
	STA	FUNK
	RET
*
* OCT FUNCTION PROCESSOR
*
FPROCT	CALL	FNOP	;GET THE OPERAND
	JNC	SPRAT	;NOT A STRING, TURKEY
	LXI	D,0	;CLEAR THE REGISTER
	PUSH	D	;SAVE IT
FPROCT1	MOV	A,M	;GET A BYTE
	ANI	7FH	;STRIP ANY STROBE
	CPI	30H	;IS IT LESS THAN A DIGIT?
	JC	SPRAT	;YUP, SO BOO-BOO
	CPI	38H	;IS IT TOO BIG FOR OCTAL?
	JNC	SPRAT	;YUP, SO ERROR
	ANI	7H	;TURN IT INTO A NUMBER
	XTHL		;SWAP THE STACK
	DAD	H	;LEFT SHIFT HL
	DAD	H
	DAD	H	;THREE PLACES
	ORA	L	;SET IN THE NEW DIGIT
	MOV	L,A	;BACK TO L
	XTHL		;GET BACK THE STACK
	MOV	A,M	;GET THE CHARACTER AGAIN
	INX	H	;UPDATE THE INDEX
	ANA	A	;SET FLAGS
	JP	FPROCT1	;MORE CHARACTERS TO DO
	POP	D	;GET THE NUMBER BACK
	LHLD	PNTR	;GET STACK LOCATION
	XCHG
	INX	D	;STACK PLUS ONE
	CALL	BBCD	;CONVERT TO INTERNAL FORM
	JMP	OPR30	;FINISH IT OFF
*
* EOF FUNCTION PROCESSOR
*
FPREOF	CALL	FPR40	;GET THE OPERAND
	LXI	D,8	;CHECK FOR TOO BIG
	CALL	CMP16
	JNC	SPRAT	;SURE IS
	MOV	B,L	;FIND THE BIT
	CALL	MASKER
	LXI	H,EOF	;LOCATION OF EOF BYTE
	ANA	M	;CHECK OUT THE BIT
	LXI	D,0	;JUST IN CASE
	JZ	FPREOF1	;BIT IS NOT SET
	DCX	D	;DE TO ALL ONES
FPREOF1	LHLD	PNTR	;GET STACK
	INX	H	;STACK+1
	XCHG
	CALL	BBCD	;CONVERT TO INTERNAL FORM
	JMP	OPR30	;FINISH IT OFF
*	CONVERT NUMBER TO A BIT SET
*	IN: B=BIT NUMBER TO SET
*	OUT:	A=BIT SET
MASKER	MVI	A,1	;PRESET
MASKER1	DCR	B	;UPDATE THE COUNT
	RM		;DONE
	ADD	A	;LEFTSHIFT ONE
	JMP	MASKER1	;TRY AGAIN
SANA	JNC	SPRAT	;ERROR IF NO EXPRESSION
	MVI	A,3
	STA	KIND
	CALL	FNOP	;GET AN OPERAND
	JNC	SPRAT	;ERROR IF NOT A STRING
	SHLD	NAME	;PASS THE LOCATION OF IT
	CALL	CRLF	;SEND THE NOTIFIER
	LXI	H,PCSVM
	CALL	CHKRUN
	XRA	A	;SEND START MOTORS
	CALL	BPORT
	LHLD	FSRC	;COMPUTE NUMBERS OF BYTES
	XCHG
	LHLD	ESRC
	CALL	SUB16
	SHLD	TMP1
	LHLD	SNUM
	SHLD	TMP1+2
	LHLD	SDIR
	XCHG
	LHLD	MEND
	CALL	SUB16
	SHLD	TMP1+4
	XCHG
	LHLD	TMP1
	LXI	B,7
	DAD	B
	DAD	D
	SHLD	TMP1+6
	MOV	A,L	;SEND TOTAL NUMBER OF BYTES
	CALL	OBPORT
	LDA	TMP1+7	;SEND MSB
	CALL	OBPORT
	LXI	H,TMP1	;SEND PARAMETERS
	MVI	B,6
SANA2	MOV	A,M
	PUSH	B
	PUSH	H
	CALL	OBPORT
	POP	H	;RESTORE
	POP	B
	DCR	B	;UPDATE
	INX	H
	JNZ	SANA2	;MORE TO DO
	LHLD	TMP1	;GET NUMBER OF SOURCE BYTES
	XCHG		;TO DE
	LHLD	FSRC	;FIRST BYTE LOCATION
	CALL	SANAA	;DO IT
	LHLD	TMP1+4	;GET NUMBER OF DIRECTORY BYTES
	XCHG
	INX	D
	LHLD	SDIR	;FIRST BYTES LOCATION
	CALL	SANAA	;DO IT
	STC		;SEND STOP MOTORS
	MVI	A,0
	INR	A
	CALL	BPORT
	RET		;DONE
SANAA	MOV	A,M	;GET A BYTE
	PUSH	H
	PUSH	D	;SAVE 'EM
	CALL	OBPORT
	POP	D
	POP	H
	DCX	D
	INX	H	;UPDATE
	MOV	A,D
	ORA	E	;CHECK FOR DONENESS
	JNZ	SANAA
	RET		;DONE
SANC	MVI	A,0FFH	;SET BFLAG
	STA	BFLAG
	MVI	A,7
	STA	KIND
	JMP	SPRAZ	;DO IT
SAND	MVI	A,0FFH
	STA	BFLAG
	MVI	A,6
	STA	KIND
	JMP	SPRFZ	;DO IT
SANB	JNC	SPRAT	;ERROR IF NO EXPRESSION
	MVI	A,2
	STA	KIND
	XRA	A
	STA	TEMP2
	XCHG
	PUSH	H	;SAVE START
	CALL	FNOPO
	JNC	SPRAT	;MUST BE A STRING
	SHLD	NAME	;SAVE IT
	POP	H	;GET NEXT ELEMENT
	CALL	GTIN
	DAD	D
	MOV	A,M	;CHECK FOR COMMA
	CPI	0DH
	JNZ	SANB300	;NOPE
	INX	H	;SURE WAS
	CALL	FNOPO	;GET THE LINE DESCRIPTOR
	JNC	SPRAT	;MUST BE STRING
	CALL	COUNT	;HOW MANY?
	MOV	C,E
	MOV	B,D
	LXI	D,TEMP2	;MOVE IT DOWN
	CALL	MOVE
SANB300	CALL	CRLF	;SEND A CR TO THE CONSOLE
	LXI	H,PCLDM	;SEND READING CASSETTE MESSAGE
	CALL	CHKRUN
	LDA	CHKEN	;SEE IF WE ARE CHECKREADING
	ANA	A
	JNZ	SANB301	;YUP
	CALL	PNEW1	;CLEAR ANY EXISTING PROGRAMS
SANB301	XRA	A	;SEND START MOTORS
	CALL	BINPOR
	CALL	OBINPOR	;IGNORE TWO
	CALL	OBINPOR
	LXI	H,TMP1	;READ PARAMETERS
	MVI	B,6
SANB3	PUSH	H
	PUSH	B
	CALL	OBINPOR
	POP	B
	POP	H
	MOV	M,A
	DCR	B	;DONE?
	INX	H
	JNZ	SANB3	;NOPE
	LDA	CHKEN	;ARE WE IN A CHECK?
	ANA	A	;SET FLAGS
	JNZ	SANB39	;IF SO,SKIP CHANGING THE SOURCE
	LHLD	TMP1	;GET NUMBER OF SOURCE BYTES
	XCHG		;TO DE
	LHLD	FSRC	;START OF SOURCE
	DAD	D
	SHLD	ESRC	;END OF SOURCE
	SHLD	FRAV
	LHLD	TMP1+2	;NUMBER OF SYMBOLS
	SHLD	SNUM
	LHLD	TMP1+4	;NUMBER OF BYTES OF DIRECTORY
	XCHG		;TO DE
	LHLD	MEND	;END OF MEMORY
	CALL	SUB16	;COMPUTE SDIR
	SHLD	FARY
	SHLD	SDIR
SANB39	LHLD	TMP1	;NUMBER OF BYTES OF SOURCE
	XCHG
	LHLD	FSRC	;FIRST SPOT TO PUT 'EM
	CALL	SANBA	;DO IT
	LHLD	TMP1+4	;NUMBER OF BYTES OF DIRECTORY
	XCHG
	INX	D
	LHLD	SDIR	;FIRST PLACE TO PUT 'EM
	CALL	SANBA	;DO IT
	LDA	CHKEN	;LOOK FOR ENABLE CHECKS
	ANA	A
	JNZ	SANB399	;IT'S A CHECK
	LHLD	SNUM	;COMPUTE STAB
	MOV	E,L
	MOV	D,H
	DAD	D
	DAD	D
	XCHG
	LHLD	SDIR
	DAD	D
	SHLD	STAB	;SAVE IT
	MVI	A,1
	ANA	A	;SEND STOP MOTORS
	STC
	CALL	BINPOR
	JMP	STLOA2	;START OVER
SANB399	MVI	A,1	;SEND STOP MOTORS
	ANA	A
	STC
	CALL	BINPOR
	XRA	A	;CLEAR CHECKER
	STA	CHKEN
	RET
SANBA	LDA	CHKEN	;LOOK FOR CHECKING ENABLED
	ANA	A
	JNZ	SANBAA	;SURE IS
	PUSH	H
	PUSH	D
	CALL	OBINPOR
	POP	D
	POP	H
	MOV	M,A
SANBAA	INX	H
	DCX	D
	MOV	A,D
	ORA	E
	JNZ	SANBA
	LDA	CHKEN	;LOOK FOR CHECKING
	ANA	A
	RNZ		;SURE IS, SO RETURN
	XRA	A	;CLEAR SOME FLAGS
	STA	RURD	;CLEAR RUN READY FLAG
	STA	RUNF	;CLEAR RUN FLAG
	RET		;DONE.......
LINK15	LINK	B:TBASIC16
